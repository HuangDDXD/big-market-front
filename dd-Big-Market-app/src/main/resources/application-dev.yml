server:
  port: 8091
  tomcat:
    threads:
      max: 200        # 设定处理客户请求的线程的最大数目，决定了服务器可以同时响应客户请求的数,默认200
      min-spare: 50   # 初始化线程数,最小空闲线程数,默认是10
    accept-count: 10  # 等待队列长度

# 应用配置
app:
  config:
    # 版本，方便通过接口版本升级
    api-version: v1
    # 跨域，开发阶段可以设置为 * 不限制
    cross-origin: '*'

# 线程池配置
thread:
  pool:
    executor:
      config:
        core-pool-size: 20
        max-pool-size: 50
        keep-alive-time: 5000
        block-queue-size: 5000
        policy: CallerRunsPolicy

# 数据库配置；启动时配置数据库资源信息
spring:
  shardingsphere:
    # ShardingSphere 配置项
    props:
      sql-show: true  # 启用 SQL 日志输出，便于调试和查看实际执行的 SQL 语句
    datasource:
      # 数据源配置
      name: ds_0,ds_1,big_market  # 数据源名称列表

      # 数据源 ds_0 配置
      ds_0:
        type: com.zaxxer.hikari.HikariDataSource  # 使用 Hikari 连接池
        driver-class-name: com.mysql.cj.jdbc.Driver  # MySQL JDBC 驱动
        jdbc-url: jdbc:mysql://127.0.0.1:13306/big_market_01?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true  # 数据库连接 URL
        username: root  # 数据库用户名
        password: 123456  # 数据库密码


      # 数据源 ds_1 配置
      ds_1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:13306/big_market_02?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true  # 数据库连接 URL
        username: root
        password: 123456

      # 数据源 big_market 配置
      big_market:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:13306/big_market?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true  # 数据库连接 URL
        username: root
        password: 123456

    rules:
      sharding:
        # 数据分片规则配置
        tables: # 每个表的分库分表策略

          # raffle_activity_order 表分片配置
          raffle_activity_order:
            actualDataNodes: ds_${0..1}.raffle_activity_order_00${0..3}  # 定义实际数据节点（数据库和表的分布）
            databaseStrategy:
              standard:
                shardingColumn: user_id  # 分库字段
                shardingAlgorithmName: sys_user_db_alg  # 分库算法
            tableStrategy:
              standard:
                shardingColumn: user_id  # 分表字段
                shardingAlgorithmName: sys_user_tbl_alg  # 分表算法

          # raffle_activity_account 表分片配置
          raffle_activity_account:
            actualDataNodes: ds_${0..1}.raffle_activity_account
            databaseStrategy:
              standard:
                shardingColumn: user_id
                shardingAlgorithmName: sys_user_db_alg

          # raffle_activity_account_flow 表分片配置
          raffle_activity_account_flow:
            actual-data-nodes: ds_${0..1}.raffle_activity_account_flow_00${0..3} # 定义实际数据节点（数据库和表的分布）
            database-strategy:
              standard:
                sharding-column: user_id # 分库字段
                shardingAlgorithmName: sys_user_db_alg  # 分库算法
            table-strategy:
              standard:
                shardingColumn: user_id  # 分表字段
                shardingAlgorithmName: sys_user_tbl_alg  # 分表算法


        # 分片算法配置
        sharding-algorithms:
          sys_user_db_alg:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.dd.types.common.MyDatabaseAlgorithm  # 分库算法类

          sys_user_tbl_alg:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.dd.types.common.MyTableAlgorithm  # 分表算法类

    main:
      allow-bean-definition-overriding: true  # 允许 Spring 重复定义 Bean


# MyBatis 配置【如需使用记得打开】
mybatis:
  mapper-locations: classpath:/mybatis/mapper/*.xml
  config-location:  classpath:/mybatis/config/mybatis-config.xml

# Redis
redis:
  sdk:
    config:
      host: 127.0.0.1
      port: 16379
      pool-size: 10
      min-idle-size: 5
      idle-timeout: 30000
      connect-timeout: 5000
      retry-attempts: 3
      retry-interval: 1000
      ping-interval: 60000
      keep-alive: true

# 日志
logging:
  level:
    root: info
  config: classpath:logback-spring.xml